{"version":3,"sources":["../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/index.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","components/ContactForm/ContactForm.module.css","components/Contact/Contact.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","views/ContactsView/ContactsView.module.css","components/ContactForm/ContactForm.js","components/Contact/Contact.js","components/ContactList/ContactList.js","components/Filter/Filter.js","views/ContactsView/ContactsView.js"],"names":["alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","length","Error","unique","split","filter","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","module","exports","get","characters","seed","lookup","index","build","isValid","clusterWorkerId","generate","seedValue","worker","workerId","newCharacters","undefined","_seed_","counter","previousSeconds","str","seconds","Date","now","random","format","number","done","loopCounter","pow","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","mask","log","LN2","step","id","RegExp","replace","test","ContactForm","useState","name","setName","setNumber","dispatch","useDispatch","savedRecords","useSelector","state","contacts","items","nameInputId","shortid","numberInputId","handleChange","e","currentTarget","value","className","s","form","onSubmit","preventDefault","console","phonebookRecords","newRecord","normalizedNewName","toLowerCase","some","isUnique","addContacts","alert","wrapper","htmlFor","input","type","pattern","title","required","onChange","submitButton","Contact","record","spacing","ContactList","useEffect","readContacts","visibleList","contactsSelectors","getVisible","list","map","line","deleteButton","onClick","deleteContacts","Filter","filterLabel","event","filterItems","ContactsView","container","headline"],"mappings":"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","file":"static/js/4.d323bf27.chunk.js","sourcesContent":["'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nmodule.exports = 0;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1_TmK\",\"wrapper\":\"ContactForm_wrapper__ZKQ5C\",\"input\":\"ContactForm_input__R5xmz\",\"submitButton\":\"ContactForm_submitButton__14O7w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"record\":\"Contact_record__38PFc\",\"name\":\"Contact_name__j_j7e\",\"number\":\"Contact_number__3T_vZ\",\"spacing\":\"Contact_spacing__1K-5g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__vV7U9\",\"line\":\"ContactList_line__1j70j\",\"deleteButton\":\"ContactList_deleteButton__gxeLe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__3f8Z1\",\"filterLabel\":\"Filter_filterLabel__1aKy5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headline\":\"ContactsView_headline__2ecVP\"};","import { useState } from 'react';\r\nimport { useDispatch,useSelector} from 'react-redux';\r\nimport { addContacts } from '../../redux/contacts/contacts-operations';\r\nimport shortid from 'shortid';\r\nimport s from './ContactForm.module.css';\r\n\r\nfunction isUnique(phonebookRecords, newRecord) {\r\n  const normalizedNewName = newRecord.toLowerCase();\r\n  return !phonebookRecords.some(\r\n    ({ name }) => name.toLowerCase() === normalizedNewName,\r\n  );\r\n}\r\n\r\n\r\nconst ContactForm = () => {\r\n  \r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n  const dispatch = useDispatch();\r\n  const savedRecords = useSelector(state => state.contacts.items);\r\n  const nameInputId = shortid.generate();\r\n  const numberInputId = shortid.generate();\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    switch (name) {\r\n      case 'name': setName(value);\r\n        break;\r\n      case 'number': setNumber(value);\r\n        break;\r\n      default: return;\r\n    }\r\n  };\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    console.log(savedRecords, 'name=', name);\r\n    if (!isUnique(savedRecords, name)) {\r\n      alert('THIS NAME IS ALREADY PRESENT IN A PHONEBOOK');\r\n      return;\r\n    }\r\n   dispatch(addContacts({ name, number}));\r\n    reset();\r\n  };\r\n  const reset = () => {\r\n      setName('');\r\n      setNumber('');\r\n  };\r\n\r\n    return (\r\n      <form className={s.form} onSubmit={handleSubmit}>\r\n        <div className={s.wrapper}>\r\n          <label htmlFor={nameInputId}>\r\n            Name\r\n            <input\r\n              className={s.input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              id={nameInputId}\r\n              value={name}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n          <label htmlFor={numberInputId}>\r\n            Phone Number\r\n            <input\r\n              className={s.input}\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              id={numberInputId}\r\n              value={number}\r\n              onChange={handleChange}\r\n            />\r\n          </label>\r\n        </div>\r\n\r\n        <button className={s.submitButton } type=\"submit\">Add contact</button>\r\n      </form>\r\n    );\r\n}\r\nexport default ContactForm;\r\n\r\n","import React from 'react';\r\nimport s from './Contact.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Contact = ({ name, number }) => {\r\n    return (\r\n      <p className={s.record}>\r\n        <span className={s.name}> {name}</span> <span className={s.spacing}>:</span>\r\n        <span className={s.number}>{number}</span>\r\n      </p>\r\n    );\r\n}\r\n\r\nexport default Contact;\r\n\r\nContact.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string,\r\n};\r\n","import { useEffect } from 'react';\r\nimport contactsSelectors from '../../redux/contacts/contacts-selectors'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { readContacts, deleteContacts } from '../../redux/contacts/contacts-operations';\r\nimport Contact from '../Contact/Contact';\r\nimport s from './ContactList.module.css';\r\n\r\n\r\nconst ContactList = () => {\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(readContacts());\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []\r\n  );\r\n\r\n  const visibleList = useSelector(state=>contactsSelectors.getVisible(state));\r\n\r\n    return (\r\n      <ul className={s.list}>\r\n        {visibleList.map(item => (\r\n          <li key={item.id} className={s.line}>\r\n            <Contact\r\n              name={item.name}\r\n              number={item.number}\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              className={s.deleteButton}\r\n              onClick={() => dispatch(deleteContacts(item.id))}\r\n            ></button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    );\r\n\r\n};\r\n\r\nexport default ContactList;\r\n\r\n","import React from 'react';\r\nimport {useSelector, useDispatch} from 'react-redux';\r\nimport {filterItems} from '../../redux/contacts/contacts-actions';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(state => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n    return(\r\n    <label className={s.filterLabel}>\r\n        Search by name\r\n        <input type=\"text\" className={s.filter} value={value}\r\n          onChange={(event) => dispatch(filterItems(event.currentTarget.value))}\r\n        />\r\n        </label>\r\n        )\r\n}\r\n\r\n\r\nexport default Filter;\r\n\r\n","import ContactForm from '../../components/ContactForm/ContactForm';\r\nimport ContactList from '../../components/ContactList/ContactList';\r\nimport Filter from '../../components/Filter/Filter';\r\nimport s from './ContactsView.module.css';\r\n\r\nconst ContactsView = () => { \r\n    return (\r\n    <div className={s.container}>\r\n      <h1 className={s.headline}>Phone book</h1>\r\n      <ContactForm />\r\n      <h2 className={s.headline}>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n};\r\nexport default ContactsView;"],"sourceRoot":""}